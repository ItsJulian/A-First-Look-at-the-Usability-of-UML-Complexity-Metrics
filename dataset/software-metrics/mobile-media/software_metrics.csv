,Total line count,Lines of code,statement count,Cyclomatic complexity,Average Cyclomatic complexity for methods,Average lines of code for methods,Average lines of code for methods with at least 3 lines,Cognitive Complexity,Coupling between objects,Dependencies in,Number of Children,Response for a class,Cohesion Among Methods of Classes,Lack of Cohesion in Methods 5,Method-Method through Attributes Cohesion,Normalized Hamming Distance,A Sensitive Metric of Class Cohesion,Tight Class Cohesion,Loose Class Cohesion,Third party classes used,Third party methods used
1,2072,975,441,155,1.71,4.92,10.95,86,61,23,0,140,0.3297428571428571,0.9506375,0.0759,0.4684857142857143,0.126775,0.169922708,0.2440949406666666,53,94
2,2478,1287,558,219,1.93,5.32,12.35,137,78,38,3,143,0.3297428571428571,0.9480875,0.0759,0.4684857142857143,0.126425,0.1506257125,0.1942260054166666,71,107
3,2778,1442,646,253,1.96,5.31,12.6,164,87,45,3,172,0.3045555555555555,0.9603,0.04888,0.4777777777777777,0.1753166666666666,0.1610190768,0.21649616,74,125
4,2875,1491,681,264,2.0,5.43,13.24,181,87,45,3,177,0.2951777777777777,0.96204,0.04454,0.4917111111111111,0.17375,0.1592355272,0.212011312,74,129
5,3271,1683,754,293,1.97,5.31,12.64,202,140,89,8,267,0.3519285714285714,0.9781999999999998,0.0759,0.4614416666666667,0.1373375,0.1568498183333333,0.2006227133333333,78,147
6,4192,2179,1022,374,2.01,5.67,13.85,274,192,115,11,348,0.3083944444444444,0.8717,0.0457444444444444,0.5015375000000001,0.206490909090909,0.2045415143243243,0.2710136475675676,89,175
7,4982,2651,1245,447,1.99,5.7,13.45,319,263,161,19,451,0.3059625000000001,0.869305,0.03453,0.51283,0.4691999999999999,0.2632323845652174,0.323705587173913,115,206
8,5708,3145,1519,535,2.1,6.05,14.08,383,318,202,23,570,0.2951115384615385,0.8573454545454545,0.0301,0.5313999999999999,0.4116,0.2651159347058823,0.3611721639215686,126,234
tools,SonarQube,SonarQube; CK; JArchitect,SonarQube,CK; SonerQube; JArchitect,JArchitect,JArchitect,JArchitect,SonarQube,CK,CK,CK,CK,JPeek,JPeek; CK,JPeek,JPeek,JPeek,CK,CK,JArchitect,JArchitect
comment,"Total lines in the files, including empty lines and comments","Used sonarqube value as it is most correct, ck can have a margin of error due to the intermediate representation used, jk computes the sum of all code lines in methods",The total count of statements in the project,Used CK value as it takes more decision points into account,"This describes the average cyclomatic complexity for methods, rather than the whole project",Shows the average lines of code for all methods,This is included as it excludes methods like simple getters and setters,Only SonarQube value is present,Describes the total number of dependencies classes have. This is the same as ck_fanout,Describes the total number of dependencies on classes of the project. This is the same as cboModified-fanout,The sum of the immediate children every class has through inheritance,The sum of unique method invocations for each class,The mean of the CAMC metric,"The mean of the LCOM5 metric, JPeek was used here because it uses a newer version of the algorithm then CK does, CK themself says that the version they use it unreliable",The mean of the MMAC metric,The mean of the NHD metric,The mean of the SCOM metric,"The mean of the tight class cohesion value, describing cohesion of the project through method invocations","The mean of the loose class cohesion value, similair to tcc, but restricting which methods to include more.","Shows how many third party classes are used, such as the java API and other libraries","Shows how many third party methods are used, such as the java API and other libraries"